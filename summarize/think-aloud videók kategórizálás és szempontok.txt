Task-A / Lang-7b
hibás: NumberUtils.createNumber
https://github.com/Spirals-Team/defects4j-repair/blob/Lang7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L445
rank: 3 (első 7 metódusnak ugyan az a score-ja!)
iFL sorrend:
NumberUtils.createFloat (0.57)
NumberUtils.createBigInteger (0.57)
NumberUtils.createNumber (0.57)
NumberUtils.createDouble (0.57)
NumberUtils.createBigDecimal (0.57)
NumberUtils.createInteger (0.57)
NumberUtils.isAllZeros (0.57)
NumberUtils.createLong (0.50)
NumberUtils.isDigits (0.50)
SystemUtils.getJavaVersionMatches (0.20)
StringUtils.isBlank (0.20)
SystemUtils.getOSMatchesName (0.20)
SystemUtils.getOSMatches (0.20)
SystemUtils.getSystemProperty (0.20)
SystemUtils.isJavaVersionMatch (0.20)
SystemUtils.isOSNameMatch (0.20)
SystemUtils.isOSMatch (0.20)
SystemUtils.isJavaVersionAtLeast (0.19)
StringUtils.isEmpty (0.06)
________________
Task-B / Lang-3b
hibás: NumberUtils.createNumber
https://github.com/Spirals-Team/defects4j-repair/blob/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L450
rank: 3
iFL sorrend:
NumberUtils.isAllZeros (0.37)
NumberUtils.createFloat (0.37)
NumberUtils.createNumber (0.33)
StringUtils.isBlank (0.18)
innentől mind 0
MutableShort konstruktor
StrTokenizer.setDelimiterMatcher
StringEscapeUtils.unescapeCsv
HashCodeBuilder.append
ArrayUtils.lastIndexOf
DefaultExceptionContext.setContextValue
ClassUtils.isAssignable
ArrayUtils.remove
StrMatcher.trimMatcher
ClassUtils.getPublicMethod
________________
Task-C / Lang-55b
hibás: StopWatch.stop():
https://github.com/Spirals-Team/defects4j-repair/blob/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java#L114
rank: 3
iFL sorrend:
suspend (0.57)
getTime (0.44)
stop (0.44)
start (0.40)
konstruktor (0.40)
innentől mind 0
StrBuilder.hashCode
StrBuilder.append
StrTokenizer.set
StrBuilder.appendIn
ToStringBuilder.appendToString
MutableDouble.add
MutableByte.setValue
Fraction.intValue
LocaleUtils.availableLocaleSet
________________
Task-D / Lang-61b
hibás: StrBuilder.indexOf:
https://github.com/Spirals-Team/defects4j-repair/blob/Lang61/src/java/org/apache/commons/lang/text/StrBuilder.java#L1760
rank: 4
iFL sorrend:
deleteFirst (0.5)
deleteAll (0.5)
indexOf [String] (0.5)
indexOf [String,int] (0.47)
deleteImpl (0.36)
StrBuilder konstruktor [String,int] (0.16)
append (0.13)
StrBuilder konstruktor [String] (0.10)
ensureCapacity (0.10)
innentől 0 score
ArrayUtils.add
MutableByte.floatValue
ToStringStyle.append
DoubleRange.getMaximumInteger
EqualsBuilder.reflectionAppend




________________


Task-E / Lang-22b
hibás: Fraction.greatestCommonDivisor(II)I
https://github.com/Spirals-Team/defects4j-repair/blob/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java#L581
rank: 2
iFL sorrend:
Fraction.reduce (0,70)
Fraction.greatestCommonDivisor (0.44)
Fraction.equals (0.40)
Fraction.getDenominator (0.30)
Fraction.getNumerator (0.30)
Fraction.Fraction (0.29)
Fraction.getReducedFraction (0,26)
Fraction.getFraction (0,17)
________________
Task-F / Lang-50b
hibás: FastDateFormat.getDateInstance és FastDateFormat.getDateTimeInstance
https://github.com/Spirals-Team/defects4j-repair/blob/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java#L279
https://github.com/Spirals-Team/defects4j-repair/blob/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java#L458
rank: 3 és 7
iFL sorrend:
FastDateFormat.getDateTimeInstance (0,70)
FastDateFormat.getDateInstance (0,70)
FastDateFormat.getDateTimeInstance (0,70)
FastDateFormat.getDateTimeInstance (0,70)
FastDateFormat.getLocale (0,63)
FastDateFormat.getDateInstance (0,50)
FastDateFormat.getDateInstance (0,50)
FastDateFormat.hashCode (0,31)
FastDateFormat.parseToken (0,31)
FastDateFormat.selectNumberRule (0,31)
FastDateFormat.init (0,31)
FastDateFormat.getInstance (0,31)
FastDateFormat.parsePattern (0,31)
FastDateFormat.FastDateFormat (0,31)


________________




vsz. 1 (Gergő) (A, B, D, E)
!debugging strategies
(routine) Down from the Program's Start to the Bug;
(feature) Down from the Program's Start to the Bug; Add Debugging Functionality
(use-case) Down from the Program's Start to the Bug; Add Debugging Functionality
!debugging styles
(routine) manual debugging;  socially-aided debugging
voltak olyan tesztek amik a gép lassúsága miatt buktak és ezekre nem is jött rá rögtön, hogy miért buknak. Elsőre a JVM verziókra gyanakodott és ez volt az egyetlen olyan pont amikor a goolge-ban rákeresett hogy a JVM-mel mi a helyzet, melyik verzió mit tud.
saját elmondása szerint nem napi rutin hogy lefedettséget használ és ez látszik is a munkája közben, pl.: nem érti a lefedettség fogalmát
(feature) manual debugging; tool-aided debugging
mindhárom tool-t használja, ebből az atlas és a emma amit többet, de ezeket is csak mellékesen, amikor már nem jut eszébe más.
(use-case) manual debugging; tool-aided debugging
azért nem használja az interaktív debuggolást mert nem érti hogy hogyan működik és mire jó ezért azt hiszi, hogy nem ad több infot mint a manuális debug
a (feature) alkalommal sikerült használnia az iFL-t és a hipotetikus esetnél önnálóan megfogalmazta az egyik alap use-case-t hozzá. nem okozott problémát a z inicializálás a (use-case) részben
!ease of verbalization
(routine) unprompted "braindump"
(feature) unprompted "braindump"
(use-case) unprompted "braindump"
!diverging from routine debugging workflow
(feature) conservative
retrospekcióban elmondta, hogy szerinte a debug-módban való futtatás nem sokkal ad többet mint a kézi debuggolás println-nel
az Eclipse-be alapból benne lévő JUnit eszközt is csak a feature videó legvégén használja amikor már minden saját routine-jából származó ötlete elfogyott. a test kimenet részleteit (melyik error, melyik assert és mivel bukik) szinte véletlenül találja meg, de ezután se használja számottevően. pl. a trace-t használja belőle, de az értékeket amiket kiír az assert továbbra is println-ből olvassa ki.
(use-case) conservative; ready to assimilate new tools and informations
!sources provided by the development environment
(routine) static source code; stdout, stderr and log-files; settings and configuration of the IDE or tools
az egyik erőforrás hiány miatt bukó teszt esetében arra gyanakodott hogy a JVM verziók miatt lehet
(feature) static source code; stdout, stderr and log-files; static structure; traces; test coverage; iFL
lefedettség mérés és atlas segítségével próbálja megkeresni a releváns részeket.
iFL-t próbálta használni, de nem látta hogy mivel ad többet mint a saját ötletei, saját tudása és tippje nagyon félre viszi, iFL-lel hamarabb meglett volna a hiba helye, mert nem is számított rá hogy az indexOf (assert-ben lévő check metódus) a hibás
a trace-eket csak utolsó mentsvárként használja és csak azokat amiket a teszt bukása során rendelkezésre állnak, nincs debug futtatás, ezeket is véletlenül veszi észre
(use-case) static source code; static structure; stdout, stderr and log-files; test results; test coverage; iFL
lendületből az iFL-lel kezd, ez nagy Pálfordulás a korábbiakhoz képest az ő esetében. előszelekcióra használja.
iFL-t az elsődleges feltérképezésre használta. merre induljon el?
atlas-t használja a hívások megkeresésére.
“hú ez dejó ez a cuccos” test lefedettségre
!sources provided by people
(routine)  community
(feature) 
(use-case)  community
GeeksforGeeks: x & 1 != 1 páros vagy páratlan
!topic of information
(routine) information about the related source code; special knowledge required for the task
JVM verziókkal kapcsolatban keresett. Hogyan irassuk ki az objektum classját println-nel a kézi debug során.
a forráskóddal kapcsolatban csak az Eclipse szöveges keresésre és még inkább az olvasásra hagyatkozott.
(feature) information about the related source code
(use-case) special knowledge required for the task
bináris operátorokra keresett rá
!new information processing
(routine) a priori usage
elmondása szerint korábban is sokat keresett neten kódolás közben
saját elmondása szerint mindig is manuálisan debuggolt
(feature) a priori usage
saját elmondása szerint mindig is manuálisan debuggolt
(use-case) a priori usage; integrated usage
racionalizál, de nem veszi észre (use-case hipotetikus esetek): “indexOf metódus hibásságára már az iFL előtt gondoltam” de valójában, csak akkor vette észre hogy az iFL javasolja ezt a metódust, amikor már neki is gyanús lett a kód olvasgatás során.
saját elmondása szerint egy eddig nem gyanúsnak gondolt metódus megjelenésének örül az iFL listán és meg is nézi, de ez a (feature) alatt nem így történik, csak akkor nézi meg amikor már az olvasás során ő is odaért
az iFL-t (interakció nélkül) és az atlas-t (call graph), JUnit kimenetet is beépítette a munkamenetben. sokkal magabiztosan használja őket mint korábban.
________________
vsz. 2 (Béla) (A, B, D, F)
!debugging strategies
(routine) 
(feature) 
(use-case) 
!debugging styles
(routine) 
(feature)
(use-case) 
!ease of verbalization
(routine) 
(feature) 
(use-case) 
!diverging from routine debugging workflow
(routine) none
(feature)
(use-case) 
!sources provided by the development environment
(routine) 
(feature) 
(use-case)
!sources provided by people
(routine) 
(feature) 
(use-case)
!topic of information
(routine) 
(feature) 
(use-case)
!new information processing
(routine) 
(feature) 
(use-case) 
________________
vsz. 3 (Gergő) (A, B, C, F)
!debugging strategies
(routine) Drill Up from the Problem to the Bug
(feature) Drill Up from the Problem to the Bug
hipotetikus: egyszerű hiba esetén nem sokat számít a gyanússág és a prorgam szerkezet megértése
tankönyvbe illő módon használja az iFL-t de csak interakció nélkül
(use-case) Drill Up from the Problem to the Bug
tankönyvbe illő módon használja az iFL-t de csak interakció nélkül
!debugging styles
(routine) interactive debugging; manual debugging; socially-aided debugging
(feature) tool-aided debugging; interactive debugging
iFL-t használ ahhoz hogy kiválassza merre induljon el
(use-case)  interactive debugging; tool-aided debugging; manual debugging
iFL-t használ ahhoz hogy kiválassza merre induljon el
!ease of verbalization
(routine) inaccessible processes
csak a forráskódot és a képernyőn látott szöveget olvassa fel, nagyon ritkán ad információt a gondolatairól
kicsit többet magyaráz, olyan mintha oktatna, vagyis tudást akar átadni, nem pedig csak szűrés nélkül kimondja amire gondol
az előzőek mellett sajnos itt egy résznél nem működött a hangfelvétel
(feature) inaccessible processes; unprompted "braindump"
hipotetikus: nagyon könnyen általánosít, de ez a debuggolás során nem jelentkezik ennyire erősen
(use-case) inaccessible processes; unprompted "braindump"
sokkal többször mondja ki a gondolatait, de többségében még mindig forráskódot olvas
2021-02-26_13-37-44#30:00: nem tudni, hogy miért nézegeti az assertSame metódust mert csak kódot olvas és nem verbalizálja a gondolatait
!diverging from routine debugging workflow
(routine) conservative; conformist
(feature) conformist; ready to assimilate new tools and informations; conservative
a lefedettséget nem szokta használni saját elmondása szerint és nem is használja
(use-case) conformist; conservative; ready to assimilate new tools and informations
a lefedettséget nem szokta használni saját elmondása szerint és nem is használja, de az iFL-t igen
!sources provided by the development environment
(routine) static source code; test results; traces
a teszt futása alapján keresi meg azt az assertet ami bukik
(feature) static source code; iFL; test results; traces
tankönyvbe illő módon használja az iFL-t de csak interakció nélkül
(use-case) static source code; iFL; test results; traces
tankönyvbe illő módon használja az iFL-t de csak interakció nélkül
nem egyértelmű hogy rendezés irányát egy kattintással állítjuk az iFL-ben
!sources provided by people
(routine)  experiment; community
rögtön elolvassa a feladatot és a handoutot
(feature)  experiment
(use-case)  experiment
!topic of information
(routine) information about the related source code; special knowledge required for the task
viszonylag tág környezetet is átnéz, nem csak azt a részt ahol a hiba van hanem megnézi a hibás metódus teljes egészét és próbálja megérteni
stack-overflow: double és float mérete Javaban
(feature) information about the related source code
(use-case) information about the related source code
debug futtatás közbeni trace a kontext.
!new information processing
(routine) a priori usage
úgy tűnik hogy a jól ismert munkamenetét követi
szinte pontosan ugyanazt a munkamenetet követi a második példán is mint az elsőn
(feature) integrated usage
(use-case) integrated usage
________________
vsz. 4 (Béla) (A, B, D, F)
!debugging strategies
(routine) 
(feature) 
(use-case) 
!debugging styles
(routine)
(feature)
(use-case) 
!ease of verbalization
(routine) 
(feature) 
(use-case) 
!diverging from routine debugging workflow
(feature)
(use-case) 
!sources provided by the development environment
(routine) 
(feature) 
(use-case)
!sources provided by people
(routine) 
(feature) 
(use-case)
!topic of information
(routine) 
(feature) 
(use-case)
!new information processing
(routine) 
(feature) 
(use-case) 
________________
vsz. 5 (Béla) (A, B, C, E)
!debugging strategies
(routine) Drill Up from the Problem to the Bug
bukó tesztből ill. annak assert-jéből indul ki, onnan indítja a hibakeresést
(feature) Drill Up from the Problem to the Bug
(use-case) Drill Up from the Problem to the Bug
!debugging styles
(routine) manual debugging; socially-aided debugging; tool-aided debugging 
Javadoc és comment elolvasása után a meglévő, hibásnak vélt kódrészlet kommentelése, illetve új utasítások megadása + println - ha bizonytalan
googlizás
coverage használata
(feature) manual debugging; tool-aided debugging
kód olvasás, értelmezés és módosítása + comment-be “jegyzet” írása magának (a futás egyes állapotaiban a változókban milyen értékeknek kellene lenniük)
coverage használata
(use-case) manual debugging; socially-aided debugging; tool-aided debugging
a “felesleges, zavaró” kódot kommentbe teszi
coverage használata
google-zás + online kalkulátorral kiszámoltatja az eredményt
println
!ease of verbalization
(routine) inaccessible processes 
ahogy halad a kód vizsgálatával folyamatosan “lefordítja” az utasításokat, vagyis elmagyarázza, hogy az egyes parancsok mit csinálnak
(feature) inaccessible processes
(use-case) inaccessible processes
a kódot olvasva értelmezi az utasításokat és a gyanúsnak gondolt részeknél elmondja, hogy szerinte mit kellene hogy csináljanak az egyes parancsok
!diverging from routine debugging workflow
(feature) conservative; conformist
alapból nem akar eltérni a megszokott folyamataitól, de egy idő után kipróbálja az új eszközöket (Atlas - data flow)
coverage-t az elejétől használja
(use-case) conservative
nem igazán tér el / változik a “viselkedése” a kísérlet során
!sources provided by the development environment
(routine) static source code; test results; traces; test coverage; stdout, stderr and log-files 
a bukó teszt assert-jéből kiindulva keresi meg a hiba helyét + coverage használata
(feature) static source code; test results; traces; test coverage
(use-case) static source code; test results; traces; test coverage; stdout, stderr and log-files
!sources provided by people
(routine) community 
(feature) 
(use-case) community
!topic of information
(routine) information about the related source code; special knowledge required for the task
googlizés a float és decimal ábrázolásra 
(feature) information about the related source code;
(use-case) information about the related source code; special knowledge required for the task
googlizés a legnagyobb közös osztóra
!new information processing
(routine) a priori usage 
(feature) integrated usage
mondjuk lehet h túlzás a rutinszerűség állítása: megnézte és felhasználta az Atlas data-flow-ját
(use-case) a priori usage
az iFL-t nem használta egyik esetben sem, az Atlas-t  egy alkalommal.
A hipo-ban azt mondta, hogy ha az iFL a 6. helyre tesz egy általa gyanúsnak vélt metódust (és ez van legelőrébb a gyanúsnak vélt elemek közül) akkor azzal kezdené a vizsgálatot, ugyanakkor egyáltalán nem használta az eszközt (még csak meg sem nézte a rangsort)
________________
vsz. 6 (Gergő) (A, B, C, E)
!debugging strategies
(routine) Refactoring during debugging; Down from the Program's Start to the Bug
majdnem a teljes csomagot átnézni, de nagyon tág kontextet néz meg, iFL számára hasznos lehet
említi hogy refactoringgal egyszerűbbé lehetne tenni és így könnyebb lenne megérteni
a tesztet is refactorálná, de nem teszi meg
(feature) Down from the Program's Start to the Bug
(use-case) Drill Up from the Problem to the Bug; Down from the Program's Start to the Bug
!debugging styles
(routine) manual debugging; interactive debugging
véleménye szerint túl egyszerű volt a feladat
a bonyolultabb feladat során használt debug futtatást
(feature) manual debugging
(use-case) tool-aided debugging; manual debugging
iFL, emma, atlas tooloknak ad egy esélyt
!ease of verbalization
(routine) inaccessible processes; unprompted "braindump"; generalization and second-hand information
a kísérlettel kapcsolatban is sok véleményt fogalmaz meg
amikor elég nehéz lesz a feladat nem tud egyszerre gondolkodni és beszélni
(feature) unprompted "braindump"; generalization and second-hand information
feltételezem, hogy nem volt elég összetett a feladat, hogy zavarja a verbalizációt
(use-case) unprompted "braindump"
!diverging from routine debugging workflow
(routine) conformist
(feature) conformist; conservative
(use-case) conformist; ready to assimilate new tools and informations
retrospekció: kicsinek érzi a példákat
feltehetőleg nem azért használja az eszközöket, mert illeszkedik a munkamenetben, hanem azért mert ad neki egy esélyt és kíváncsi rá
!sources provided by the development environment
(routine) static structure; static source code; test results; traces; settings and configuration of the IDE or tools
csak a projekt elég nagy szeletének részletes megismerése után nézi meg a konkrét teszt eredményét, iFL kontextus szempontjából hasznos lesz
észrevette hogy nem egyeznek a JVM verziók
átnézi a projekt package szerkezetét
(feature) static structure; static source code; test results
(use-case) static structure; static source code; test coverage; iFL; traces; test results
teljesen szabályosan használja az iFL-t, interakciót is használja, kizárja a nem gyanús metódusokat
iFL, emma, atlas tooloknak ad egy esélyt
iFL InteliJ-be kéne egy plug-in
2021-02-26_09-23-24#végén: javaslatok a tool továbbfejlesztésére
!sources provided by people
(routine)  experiment; community; official
stackoverflow és oracle java doc és wikipédia: double pontosság
(feature)  experiment
(use-case)  experiment
!topic of information
(routine) information about the related source code; special knowledge required for the task
környező csomagokban lévő elemek és felépítésük
rákeresett a float és double pontosságára
(feature) information about the related source code
(use-case) information about the related source code
!new information processing
(routine) a priori usage
(feature) a priori usage
(use-case) need further information or feature; integrated usage; a priori usage
iFL score számítás részletei alapján jobban bízik a programban ezért ad neki egy esélyt